name: update_submodule_on_pr.yml

# 1. dev 브랜치를 대상으로 하는 PR이 생성되거나, 업데이트(synchronize)될 때 실행
on:
  push:
    branches:
      - dev

jobs:
  auto-update-submodule:
    runs-on: ubuntu-latest

    # 2. 워크플로우가 PR 브랜치에 코드를 푸시할 수 있도록 쓰기 권한을 부여합니다.
    permissions:
      contents: write

    steps:
      # 3. PR을 보낸 브랜치(head_ref)의 코드를 체크아웃합니다.
      - name: 'Checkout PR Branch'
        uses: actions/checkout@v4
        with:
          # PR의 소스 브랜치를 명시적으로 지정합니다.
          ref: ${{ github.head_ref }}
          # 서브모듈도 함께 가져옵니다.
          submodules: 'recursive'

      - name: 'Update Submodule and Commit'
        run: |
          # Git 커밋을 위한 사용자 정보를 설정합니다.
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"

          # 서브모듈을 최신 커밋으로 업데이트합니다.
          # 서브모듈 저장소의 .gitmodules 파일에 추적할 브랜치(예: dev)가 명시되어 있어야 합니다.
          git submodule update --remote p

          # 서브모듈 변경사항이 없으면 여기서 작업을 중단합니다.
          if [[ -z $(git status -s) ]]; then
            echo "Submodule is already up-to-date."
            exit 0
          fi

          # 변경된 서브모듈 정보를 커밋합니다.
          echo "Submodule outdated. Committing new version..."
          git add p
          git commit -m "chore(submodule): Update submodule 'p' to latest"

          # 4. 해당 브랜치에 직접 푸시하여 PR을 업데이트합니다.
          git push
